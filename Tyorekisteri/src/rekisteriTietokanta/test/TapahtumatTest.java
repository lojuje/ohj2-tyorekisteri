package rekisteriTietokanta.test;
// Generated by ComTest BEGIN
import java.io.*;
import rekisteriTietokanta.*;
import fi.jyu.mit.ohj2.Mjonot;
import java.util.*;
import static org.junit.Assert.*;
import org.junit.*;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2020.04.14 10:16:03 // Generated by ComTest
 *
 */
@SuppressWarnings("all")
public class TapahtumatTest {



  // Generated by ComTest BEGIN
  /** testLisaa49 */
  @Test
  public void testLisaa49() {    // Tapahtumat: 49
    Tapahtumat tap = new Tapahtumat(); 
    Tapahtuma t = new Tapahtuma(), t1 = new Tapahtuma(); 
    tap.lisaa(t); 
    tap.lisaa(t1); 
    assertEquals("From: Tapahtumat line: 54", 2, tap.getLkm()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testLueTiedostosta68 
   * @throws SisaltoException when error
   */
  @Test
  public void testLueTiedostosta68() throws SisaltoException {    // Tapahtumat: 68
    Tapahtumat tapahtumat = new Tapahtumat(); 
    Tapahtuma t1 = new Tapahtuma(), t2 = new Tapahtuma(); 
    t1.luoTestiTapahtuma(1, 2); 
    t2.luoTestiTapahtuma(2, 1); 
    String hakemisto = "testirekisteri"; 
    String tiedNimi = hakemisto+"/nimet"; 
    File ftied = new File(tiedNimi + ".dat"); 
    File dir = new File(hakemisto); 
    dir.mkdir(); 
    ftied.delete(); 
    try {
    tapahtumat.lueTiedostosta(tiedNimi); 
    fail("Tapahtumat: 83 Did not throw SisaltoException");
    } catch(SisaltoException _e_){ _e_.getMessage(); }
    tapahtumat.lisaa(t1); 
    tapahtumat.lisaa(t2); 
    tapahtumat.talleta(); 
    tapahtumat = new Tapahtumat(); 
    tapahtumat.lueTiedostosta(tiedNimi); 
    Iterator<Tapahtuma> i = tapahtumat.iterator(); 
    assertEquals("From: Tapahtumat line: 90", t1.toString(), i.next().toString()); 
    assertEquals("From: Tapahtumat line: 91", t2.toString(), i.next().toString()); 
    tapahtumat.lisaa(t2); 
    tapahtumat.talleta(); 
    assertEquals("From: Tapahtumat line: 94", true, ftied.delete()); 
    assertEquals("From: Tapahtumat line: 95", true, dir.delete()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testGetLkm182 */
  @Test
  public void testGetLkm182() {    // Tapahtumat: 182
    Tapahtumat tap = new Tapahtumat(); 
    Tapahtuma t = new Tapahtuma(), t1 = new Tapahtuma(); 
    tap.lisaa(t); 
    tap.lisaa(t1); 
    assertEquals("From: Tapahtumat line: 187", 2, tap.getLkm()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testHaeNimi217 */
  @Test
  public void testHaeNimi217() {    // Tapahtumat: 217
    StringBuilder sb = new StringBuilder("Kake/tapahtumat.dat"); 
    String nimi = Mjonot.erota(sb,'/'); 
    assertEquals("From: Tapahtumat line: 221", "Kake", nimi); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testAnnaTapahtumat263 */
  @Test
  public void testAnnaTapahtumat263() {    // Tapahtumat: 263
    Tapahtumat tap = new Tapahtumat(); 
    Tapahtuma t = new Tapahtuma(), t1 = new Tapahtuma(); 
    tap.lisaa(t); 
    tap.lisaa(t1); 
    List<Tapahtuma> lista = tap.annaTapahtumat(); 
    assertEquals("From: Tapahtumat line: 269", t, lista.get(0)); 
    assertEquals("From: Tapahtumat line: 270", t1, lista.get(1)); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testAnna289 */
  @Test
  public void testAnna289() {    // Tapahtumat: 289
    Tapahtumat tapahtumat = new Tapahtumat(); 
    Tapahtuma tanaan = new Tapahtuma(); tanaan.luoTestiTapahtuma(1, 2); tapahtumat.lisaa(tanaan); 
    Tapahtuma huomenna = new Tapahtuma(); huomenna.luoTestiTapahtuma(2, 3); tapahtumat.lisaa(huomenna); 
    Tapahtuma keskiviikko = new Tapahtuma(); keskiviikko.luoTestiTapahtuma(3, 1); tapahtumat.lisaa(keskiviikko); 
    assertEquals("From: Tapahtumat line: 297", tanaan, tapahtumat.anna(0)); 
    assertEquals("From: Tapahtumat line: 298", keskiviikko, tapahtumat.anna(2)); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testKorvaa345 */
  @Test
  public void testKorvaa345() {    // Tapahtumat: 345
    Tapahtumat tap = new Tapahtumat(); 
    int[] aloitus = { 15, 10 } ; 
    int[] aloitusP = { 12, 4, 2020 } ; 
    int[] lopetus = { 18, 0 } ; 
    int[] lopetusP = { 13, 4, 2020 } ; 
    Tapahtuma uusi = new Tapahtuma(aloitus, aloitusP, lopetus, lopetusP, 1, 1, 15, 3); 
    tap.lisaa(uusi); 
    uusi.getLopetusPaiva().equals(lopetusP); 
    int[] aloitus2 = { 15, 10 } ; 
    int[] aloitusP2 = { 12, 4, 2020 } ; 
    int[] lopetus2 = { 18, 0 } ; 
    int[] lopetusP2 = { 14, 4, 2020 } ; 
    Tapahtuma uusi2 = new Tapahtuma(aloitus2, aloitusP2, lopetus2, lopetusP2, 1, 1, 15, 3); 
    tap.korvaa(uusi2); 
    uusi.getLopetusPaiva().equals(lopetusP2); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testPoista383 */
  @Test
  public void testPoista383() {    // Tapahtumat: 383
    Tapahtumat tap = new Tapahtumat(); 
    int[] aloitus = { 15, 10 } ; 
    int[] aloitusP = { 12, 4, 2020 } ; 
    int[] lopetus = { 18, 0 } ; 
    int[] lopetusP = { 13, 4, 2020 } ; 
    Tapahtuma uusi = new Tapahtuma(aloitus, aloitusP, lopetus, lopetusP, 1, 1, 15, 3); 
    tap.lisaa(uusi); 
    int poistettiinko = tap.poista(1); 
    assertEquals("From: Tapahtumat line: 393", 1, poistettiinko); 
  } // Generated by ComTest END
}